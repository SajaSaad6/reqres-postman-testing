{
	"info": {
		"_postman_id": "afb9baaf-3998-4cd9-aa35-5ae22f173e12",
		"name": "ReqRes API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48651041",
		"_collection_link": "https://sajasaad022-3383510.postman.co/workspace/saja-saad's-Workspace~d02bdab7-cfbd-42a8-85c6-e62f6cf287e6/collection/48651041-afb9baaf-3998-4cd9-aa35-5ae22f173e12?action=share&source=collection_link&creator=48651041"
	},
	"item": [
		{
			"name": "List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Status code is 200\",  () => pm.response.to.have.status(200)",
							");",
							"",
							"",
							"pm.test(\"test case name\",  () => pm.expect(jsonData.page).to.eql(2));",
							"",
							"pm.test('Each user has an ID and email', () => {",
							"    jsonData.data.forEach(user => {",
							"        pm.expect(user.id).to.exist;",
							"        pm.expect(user.email).to.match(/@/);",
							"    });",
							"    });"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Singule User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"const userID = pm.environment.get(\"UserID\");",
							"",
							"pm.test(\"Correct User Fetched\", function () {",
							"    pm.expect(jsonData.data.id).to.eql(userID);",
							"})",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"User has first name\", function () {",
							"    ",
							"    pm.expect(jsonData.data.name).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"Rsponse has the required fields - id, email, first_name, last_name, and avatar\", function () {",
							"",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData.data.id).to.exist;",
							"    pm.expect(jsonData.data.name).to.exist;",
							"    pm.expect(jsonData.data.year).to.exist;",
							"    pm.expect(jsonData.data.color).to.exist;",
							"    pm.expect(jsonData.data.pantone_value).to.exist;",
							"});",
							"",
							"/*",
							"pm.test(\"Email is in a valid format\", function () {",
							"    pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email.should be in a valid format\");",
							"});",
							"*/",
							"",
							"pm.test(\"Verify the Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomValue = Math.floor(Math.random() * 12) + 1;",
							"",
							"pm.environment.set(\"UserID\", randomValue);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"description": "\n",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/users/{{UserID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"{{UserID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jasonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response data is empty\", function () {",
							"    pm.expect(pm.response.jason()).to.be.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/users/23",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "List <Resource>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"",
							"let resourceName = jsonData.data[1].name;",
							"",
							"pm.environment.set(\"resource2Name\", resourceName);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Correct JSON Response\", function () {",
							"    ",
							"    pm.expect(jsonData.page).to.eql(1);",
							"    pm.expect(jsonData.per_page).to.eql(6);",
							"    pm.expect(jsonData.total).to.eql(12);",
							"    pm.expect(jsonData.total_pages).to.eql(2);",
							"    pm.expect(jsonData.data.length).to.eql(6);",
							"    pm.expect(jsonData.data[0].id).to.eql(1);",
							"    ",
							"});",
							"",
							"",
							"pm.test(\"Check if a color exists\", function () {",
							"    const dataArray = jsonData.data;",
							"",
							"    let ceruleanExists = false;",
							"",
							"    //Loop through the data dataArray",
							"    for (let i = 0; i < dataArray.length; i++) {",
							"        if (dataArray[i].name === \"cerulean\") {",
							"            ceruleanExists = true;",
							"            break;",
							"        }",
							"    }",
							"    pm.expect(ceruleanExists).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/unknown",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single <Resource>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let resourceName = pm.environment.get(\"resource2Name\");",
							"",
							"pm.test(\"Correct name\", function () {",
							"    pm.expect(jsonData.data.name).to.eql(resourceName);",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/unknown/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"unknown",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single <Resource> Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response data is empty\", function () {",
							"    pm.expect(pm.response.json()).to.be.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/unknown/23",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"unknown",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\",  () => pm.response.to.have.status(201));",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Response has id and createdAT\", function () {",
							"    ",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.expect(jsonData).to.have.property(\"createdAt\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"UpdatedAt field exists\", () => pm.expect(jsonData.updatedAt).to.exist);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update (PATCH)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"const jsonData = pm.response.json();"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => pm.response.to.have.status(204));",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register-Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Token exists\", () => pm.expect(jsonData.token).to.exist);",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register-Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"})",
							"",
							"const jsonData = pm.response.json();"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"sydney@fife\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login-Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"const jsonData = pm.response.json();",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login-Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {",
							"    pm.response.to.have.status(400);",
							"})",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Error message present\", () => pm.expect(jsonData.error).to.eql(\"Missing password\"));"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"peter@klaven\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delayed Response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"const jsonData = pm.response.json();",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/users?delay=3",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					"pm.test(\"Response time is less than 1000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"});"
				]
			}
		}
	]
}